%{
A MATLAB script to convert the Open Virtualization Format (OVF) data
generated by Spirit [1], to the Visualization Toolkit (VTK) format.

In atomistic simulations, multiple spins/atoms may be defined within a unit
lattice, the sequence of data in a OVF file follows two loops:
(1) the outer loop sweeps the index of unit cells;
(2) the inner loop sweeps the index of atoms in a unit cell;
the position of spins/atoms corresponds to the information recorded in the
the .cfg file.
 
***Pre-processing is required:
cd path to output folder, which contains '.ovf' files;
Change the following parameters regarding the '.cfg' file:
(1) number of basic cells;
(2) the position atoms in units of bravais vectors;
(3) lattice constant;
(4) bravais vectors.

Refs.
[1] Spirit - Phys. Rev. B 99, 224414, https://spirit-code.github.io/
[2] FeGe parameter - https://materialsproject.org/materials/mp-21255/, 
    Phys. Rev. Research 2, 033006.
%}

clc
clear
close all
display('loading data')
% Filenames
aa3 = dir('*.ovf');
bbm = {aa3(1:end).name}'
% Find the data header
[A , B] = importdata(char(bbm(1)),' ',50);
for ii = 1 : 50
    if length(A.textdata{ii})>=13
        if A.textdata{ii}(1:13) == '# Begin: Data'
            num_of_header = ii;
        end
    end
end

% Number of basis cells along principal
dim = [10 10 10];
% The basis cell in units of bravais vectors
bc = [
    0.1135 0.6135	0.8865;
    -0.3865	0.8865	0.1135;
    0.8865	0.1135	-0.3865;
    ];
% Lattice constant (nm)
lc=0.4671;
% Bravais vectors
bv=[
    1.0 0.0 0.0;
    0.0 1.0 0.0;
    0.0 0.0 1.0;
    ];
%%
for ii = 1 : 1 % Number of files
    % Read ovf
    ii
    [A , B] = importdata(char(bbm(ii)),' ',num_of_header);
    mydata_m = A.data;
    nn = 1;
    for zz = 1 : dim(3)
        for yy = 1 : dim(2)
            for xx = 1 : dim(1)
                % pos of cell
                pos_cell = (xx - 1) * bv(1,:) + (yy - 1) * bv(2,:) + (zz - 1) * bv(3,:);
                for jj = 1 : size(bc,1)
                    % pos of atom
                    pos_atom = bc(jj,1) * bv(1,:) + bc(jj,2) * bv(2,:) + bc(jj,3) * bv(3,:);
                    px(nn) = (pos_cell(1) + pos_atom(1)) * lc;
                    py(nn) = (pos_cell(2) + pos_atom(2)) * lc;
                    pz(nn) = (pos_cell(3) + pos_atom(3)) * lc;
                    mx(nn) = mydata_m(nn,1);
                    my(nn) = mydata_m(nn,2);
                    mz(nn) = mydata_m(nn,3);
                    nn = nn + 1;
                end
            end
        end
    end
    
    ppx{ii} = px;
    ppy{ii} = py;
    ppz{ii} = pz;
    pmx{ii} = mx;
    pmy{ii} = my;
    pmz{ii} = mz;
    % uncomment the following line if you want to test on the MATLAB
    % quiver3(px,py,pz,mx,my,mz)
    %% ovf2vtk
    u = mx;
    v = my;
    w = mz;
    filename = [char(bbm(ii)),'.vtk'];
    x = px;
    y = py;
    z = pz;
    
    nr_of_elements = numel(x);
    fid = fopen(filename, 'w');
    
    %ASCII file header
    fprintf(fid, '# vtk DataFile Version 3.0\n');
    fprintf(fid, 'VTK from Matlab\n');
    fprintf(fid, 'BINARY\n\n');
    fprintf(fid, 'DATASET STRUCTURED_GRID\n');
    fprintf(fid, ['DIMENSIONS ' num2str(size(x,1)) ' ' num2str(size(x,2)) ' ' num2str(size(x,3)) '\n']);
    fprintf(fid, ['POINTS ' num2str(nr_of_elements) ' float\n']);
    fclose(fid);
    
    %append binary x,y,z data
    fid = fopen(filename, 'a');
    fwrite(fid, [reshape(x,1,nr_of_elements);  reshape(y,1,nr_of_elements); reshape(z,1,nr_of_elements)],'float','b');
    
    %append another ASCII sub header
    fprintf(fid, ['\nPOINT_DATA ' num2str(nr_of_elements) '\n']);
    fprintf(fid, 'VECTORS velocity_vectors float\n');
    
    %append binary u,v,w data
    fwrite(fid, [reshape(u,1,nr_of_elements);  reshape(v,1,nr_of_elements); reshape(w,1,nr_of_elements)],'float','b');
    
    % %append another binary u,v,w data set
    % fprintf(fid, '\nVECTORS another_vector_set float\n'); %ASCII header
    % fwrite(fid, [reshape(u*10,1,nr_of_elements);  reshape(v*2,1,nr_of_elements); reshape(w,1,nr_of_elements)],'float','b'); %binary data
    
    %append some scalar data
    fprintf(fid, '\nSCALARS EinLustigerSkalar float\n'); %ASCII header
    fprintf(fid, 'LOOKUP_TABLE default\n'); %ASCII header
    fwrite (fid, reshape(sqrt(u.^2+v.^2+w.^2),1,nr_of_elements),'float','b'); %binary data
    
    fclose(fid);
    
end
